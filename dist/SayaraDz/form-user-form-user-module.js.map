{"version":3,"sources":["webpack:///./src/app/layout/form-user/form-user-routing.module.ts","webpack:///./src/app/layout/form-user/form-user.component.html","webpack:///./src/app/layout/form-user/form-user.component.scss","webpack:///./src/app/layout/form-user/form-user.component.ts","webpack:///./src/app/layout/form-user/form-user.module.ts"],"names":[],"mappings":"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","file":"form-user-form-user-module.js","sourcesContent":["import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { FormUserComponent } from './form-user.component';\n\n\nconst routes: Routes = [\n    {\n        path: '', component: FormUserComponent\n    }\n];\n\n@NgModule({\n    imports: [RouterModule.forChild(routes)],\n    exports: [RouterModule]\n})\nexport class FormUserRoutingModule {\n}\n","module.exports = \"<div class=\\\"container pt-5\\\" >\\r\\n  <app-page-header [heading]=\\\"infoPage.title\\\" [icon]=\\\"infoPage.icon\\\"></app-page-header>\\r\\n  <div class=\\\"d-flex justify-content-center\\\">\\r\\n      <mat-spinner class=\\\"mt-5\\\"  [hidden]=\\\"!loading\\\"></mat-spinner>\\r\\n  </div>\\r\\n  <mat-card class=\\\"example-card mb-5\\\" [hidden]=\\\"loading\\\">\\r\\n    <mat-card-content>\\r\\n      <form [formGroup]=\\\"userFormGroup\\\" (ngSubmit)=\\\"onSubmit()\\\">\\r\\n        <div class=\\\"d-flex flex-column\\\">\\r\\n          <h5>Informations personnelles :</h5>\\r\\n          <div class=\\\"row\\\">\\r\\n            <div class=\\\"col-sm-6 d-flex flex-column\\\">\\r\\n              <mat-form-field>\\r\\n                <input matInput placeholder=\\\"Nom\\\"  formControlName=\\\"username\\\"/>\\r\\n                <mat-error *ngFor=\\\"let validation of account_validation_messages.username\\\">\\r\\n                  <mat-error class=\\\"error-message\\\" *ngIf=\\\"userFormGroup.get('username').hasError(validation.type) && (userFormGroup.get('username').dirty || userFormGroup.get('username').touched)\\\">{{validation.message}}</mat-error>\\r\\n                </mat-error>\\r\\n              </mat-form-field>\\r\\n            </div>\\r\\n            <div class=\\\"col-sm-6 d-flex flex-column\\\">\\r\\n              <mat-form-field>\\r\\n                <input matInput placeholder=\\\"PrÃ©nom\\\" formControlName=\\\"usersurname\\\" />\\r\\n                <mat-error *ngFor=\\\"let validation of account_validation_messages.usersurname\\\">\\r\\n                  <mat-error class=\\\"error-message\\\" *ngIf=\\\"userFormGroup.get('usersurname').hasError(validation.type) && (userFormGroup.get('usersurname').dirty || userFormGroup.get('usersurname').touched)\\\">{{validation.message}}</mat-error>\\r\\n                </mat-error>\\r\\n              </mat-form-field>\\r\\n            </div>\\r\\n          </div>\\r\\n          <div class=\\\"row\\\">\\r\\n            <div class=\\\"col-sm-6 d-flex flex-column\\\">\\r\\n              <mat-form-field>\\r\\n                <input matInput placeholder=\\\"Email\\\" type=\\\"email\\\" formControlName=\\\"email\\\" />\\r\\n                <mat-error *ngFor=\\\"let validation of account_validation_messages.email\\\">\\r\\n                  <mat-error class=\\\"error-message\\\" *ngIf=\\\"userFormGroup.get('email').hasError(validation.type) && (userFormGroup.get('email').dirty || userFormGroup.get('email').touched)\\\">{{validation.message}}</mat-error>\\r\\n                </mat-error>\\r\\n              </mat-form-field>\\r\\n            </div>\\r\\n            <div class=\\\"col-sm-6 d-flex flex-column\\\">\\r\\n              <mat-form-field>\\r\\n                <input matInput placeholder=\\\"Phone\\\" formControlName=\\\"phone\\\" />\\r\\n                <mat-error *ngFor=\\\"let validation of account_validation_messages.phone\\\">\\r\\n                  <mat-error class=\\\"error-message\\\" *ngIf=\\\"userFormGroup.get('phone').hasError(validation.type) && (userFormGroup.get('phone').dirty || userFormGroup.get('phone').touched)\\\">{{validation.message}}</mat-error>\\r\\n                </mat-error>\\r\\n              </mat-form-field>\\r\\n            </div>\\r\\n          </div>\\r\\n\\r\\n          <mat-form-field>\\r\\n            <input matInput placeholder=\\\"Address\\\" formControlName=\\\"address\\\"/>\\r\\n            <mat-error *ngFor=\\\"let validation of account_validation_messages.address\\\">\\r\\n              <mat-error class=\\\"error-message\\\" *ngIf=\\\"userFormGroup.get('address').hasError(validation.type) && (userFormGroup.get('address').dirty || userFormGroup.get('address').touched)\\\">{{validation.message}}</mat-error>\\r\\n            </mat-error>\\r\\n          </mat-form-field>\\r\\n          <br>\\r\\n          <h5>Choisir un mot de passe :</h5>\\r\\n          <div class=\\\"row\\\">\\r\\n            <div class=\\\"col-sm-6 d-flex flex-column\\\">\\r\\n              <mat-form-field>\\r\\n                <input matInput placeholder=\\\"Mot de passe\\\" type=\\\"password\\\" formControlName=\\\"password\\\"/>\\r\\n              </mat-form-field>\\r\\n            </div>\\r\\n            <div class=\\\"col-sm-6 d-flex flex-column\\\">\\r\\n              <mat-form-field>\\r\\n                <input matInput placeholder=\\\"Confirmer le mot de passe\\\" type=\\\"password\\\" formControlName=\\\"confirmPassword\\\"/>\\r\\n              </mat-form-field>\\r\\n            </div>\\r\\n          </div>\\r\\n          <br>\\r\\n          <h5>Informations gÃ©nÃ©rales :</h5>\\r\\n          <mat-form-field>\\r\\n\\r\\n            <!-- <input matInput placeholder=\\\"Fabricant\\\" type=\\\"text\\\" formControlName=\\\"fabricant\\\" [value]=fabricant.brand /> -->\\r\\n\\r\\n            <mat-select placeholder=\\\"Fabricant\\\" formControlName=\\\"fabricant\\\" required>\\r\\n              <mat-option *ngFor=\\\"let fabricant of fabricants\\\" [value]=\\\"fabricant\\\">\\r\\n                {{fabricant.id}}\\r\\n              </mat-option>\\r\\n            </mat-select>\\r\\n\\r\\n          </mat-form-field>\\r\\n        </div>\\r\\n        <div class=\\\"d-flex flex-row-reverse\\\">\\r\\n          <button type = \\\"submit\\\" mat-flat-button class=\\\"btn-search\\\">CrÃ©er utilisateur</button>\\r\\n        </div>\\r\\n\\r\\n      </form>\\r\\n    </mat-card-content>\\r\\n  </mat-card>\\r\\n</div>\\r\\n\"","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2xheW91dC9mb3JtLXVzZXIvZm9ybS11c2VyLmNvbXBvbmVudC5zY3NzIn0= */\"","import { Component, OnInit } from '@angular/core';\r\nimport {FormBuilder, FormGroup, Validators, FormControl} from '@angular/forms'\r\nimport { FabricantCRUDService } from \"../../Services/Fabricant-CRUD/fabricant-crud.service\";\r\nimport { AdminsCrudService } from \"../../Services/Admins-CRUD/admins-crud.service\"\r\nimport { UsersCrudService } from \"../../Services/Users-CRUD/users-crud.service\"\r\nimport { AuthentificationService } from \"../../Services/Authentification/authentification.service\"\r\nimport { first } from 'rxjs/operators';\r\nimport { Fabricant} from '../../model/fabricant.model';\r\nimport { Observable } from 'rxjs';\r\nimport { Router } from '@angular/router';\r\n\r\n@Component({\r\n  selector: 'app-form-user',\r\n  templateUrl: './form-user.component.html',\r\n  styleUrls: ['./form-user.component.scss']\r\n})\r\n\r\nexport class FormUserComponent implements OnInit {\r\n\r\n  infoPage = {\r\n    title : \"Creer Utilisateur\",\r\n    icon : \"fa-users\",\r\n  };\r\n\r\n  userFormGroup: FormGroup;\r\n  fabricants : any[] = [];\r\n  loading : boolean = false;\r\n  isSuperAdmin = (localStorage.getItem('isSuperAdmin') ==\"true\");\r\n\r\n  account_validation_messages = {\r\n    'username' : [\r\n        { type: 'required', message: 'Password is required' },\r\n        { type: 'minlength', message: 'Username must be at least 5 characters long' },\r\n        { type: 'maxlength', message: 'Username cannot be more than 25 characters long' },\r\n        { type: 'pattern', message: 'Your username must contain only letters' },\r\n    ],\r\n    'usersurname' : [\r\n        { type: 'required', message: 'Password is required' },\r\n        { type: 'minlength', message: 'Username must be at least 5 characters long' },\r\n        { type: 'maxlength', message: 'Username cannot be more than 25 characters long' },\r\n        { type: 'pattern', message: 'Your username must contain only letters' },\r\n    ],\r\n    'fabricant' : [\r\n        { type: 'required', message: 'Password is required' },\r\n    ],\r\n    'isAdmin': [\r\n        { type: 'required', message: 'Password is required' },\r\n    ],\r\n    'phone' : [\r\n        { type: 'required', message: 'Password is required' },\r\n    ],\r\n    'address' : [\r\n        { type: 'required', message: 'Password is required' },\r\n        { type: 'minlength', message: 'Addres must be at least 5 characters long' },\r\n        { type: 'maxlength', message: 'Addres cannot be more than 30 characters long' },\r\n    ],\r\n    'email': [\r\n        { type: 'required', message: 'Email is required' },\r\n        { type: 'pattern', message: 'Enter a valid email' }\r\n    ],\r\n    'confirm_password': [\r\n        { type: 'required', message: 'Confirm password is required' },\r\n        { type: 'areEqual', message: 'Password mismatch' }\r\n    ],\r\n    'password': [\r\n        { type: 'required', message: 'Password is required' },\r\n    ]\r\n  };\r\n\r\n  constructor(private _formBuilder: FormBuilder,\r\n              private fabricantService : FabricantCRUDService,\r\n              private admins : AdminsCrudService,\r\n              private router:Router,\r\n              private auth: AuthentificationService,\r\n              private users: UsersCrudService) { }\r\n\r\n  ngOnInit() {\r\n    this.loading = true;\r\n    this.userFormGroup = this._formBuilder.group({\r\n      username: ['', Validators.compose([\r\n    \t\tValidators.maxLength(25),\r\n    \t\tValidators.minLength(5),\r\n    \t\tValidators.pattern('^(?=.*[a-zA-Z])[a-zA-Z]+$'),\r\n    \t\tValidators.required\r\n    \t])],\r\n      usersurname: ['', Validators.compose([\r\n    \t\tValidators.maxLength(25),\r\n    \t\tValidators.minLength(5),\r\n    \t\tValidators.pattern('^(?=.*[a-zA-Z])[a-zA-Z]+$'),\r\n    \t\tValidators.required\r\n    \t])],\r\n      email: ['', Validators.compose([\r\n           Validators.required,\r\n           Validators.pattern('^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+.[a-zA-Z0-9-.]+$')\r\n      ])],\r\n      password: ['', Validators.required],\r\n      confirmPassword: ['', Validators.required],\r\n      address: ['', Validators.compose([\r\n    \t\tValidators.maxLength(25),\r\n    \t\tValidators.minLength(5),\r\n    \t\tValidators.required\r\n    \t])],\r\n      phone: ['', Validators.required],\r\n      fabricant: [null, Validators.required],\r\n    });\r\n\r\n    if(this.isSuperAdmin){\r\n      //check if is the super admin and set the authorized links\r\n      this.fabricantService.list()\r\n        .pipe(first()).subscribe(\r\n          res => {\r\n            this.fabricants = res.manufacturers;\r\n            console.log(this.fabricants);\r\n          },\r\n          err => {\r\n              console.log(\"Error occured : \"+ err);\r\n\r\n          }\r\n      );\r\n    } else {\r\n      this.auth.showMe().pipe(first()).subscribe(\r\n          res => {\r\n            var obj = {\r\n              brand : res.manufacturer,\r\n              id: res.manufacturer\r\n            }\r\n            this.fabricants.push(obj);\r\n            this.userFormGroup.get('fabricant').setValue(res.manufacturer);\r\n          },\r\n          err => {\r\n              console.log(\"Error occured : \"+ err);\r\n          }\r\n      );\r\n    }\r\n\r\n    this.loading = false;\r\n  }\r\n\r\n  onSubmit(){\r\n    this.loading = true;\r\n    console.log(\"CrÃ©er un utilisateur : \");    var service;\r\n    if(this.isSuperAdmin){\r\n      service = this.admins;\r\n    } else {\r\n      service = this.users;\r\n    }\r\n\r\n    service.create(this.userFormGroup.get('fabricant').value.id,\r\n                      this.userFormGroup.get('email').value,\r\n                      this.userFormGroup.get('password').value,\r\n                      this.userFormGroup.get('username').value,\r\n                      this.userFormGroup.get('usersurname').value,\r\n                      this.userFormGroup.get('address').value,\r\n                      this.userFormGroup.get('phone').value)\r\n    .pipe(first()).subscribe(\r\n      res => {\r\n          if (res.type == undefined) {\r\n              console.log(\"Show Error feedback!\");\r\n          } else {\r\n              console.log(res);\r\n              this.router.navigate([\"dashboard/afficherUsersFabricants\"]);\r\n          }\r\n          this.loading = false;\r\n      },\r\n      err => {\r\n        console.log(\"Error occured : /n\"+ err);\r\n        this.loading = false;\r\n      }\r\n  );\r\n\r\n  }\r\n\r\n}\r\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormUserComponent } from './form-user.component';\nimport {FormUserRoutingModule} from './form-user-routing.module';\nimport { MaterialModule } from './../material.module';\nimport { PageHeaderModule } from './../shared';\nimport {FormsModule, ReactiveFormsModule} from '@angular/forms';\n@NgModule({\n  declarations: [FormUserComponent],\n  imports: [\n    CommonModule,\n    FormUserRoutingModule,\n    MaterialModule,\n    PageHeaderModule,\n    FormsModule,\n    ReactiveFormsModule\n  ]\n})\nexport class FormUserModule { }\n"],"sourceRoot":""}